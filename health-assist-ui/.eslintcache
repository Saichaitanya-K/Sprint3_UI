[{"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\index.js":"1","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\App.js":"2","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reportWebVitals.js":"3","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Layout\\Footer.js":"4","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Dashboard.js":"5","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\store.js":"6","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\AddPatient.js":"7","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Layout\\Header.js":"8","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\PatientItemComponent.js":"9","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\actions\\PatientAction.js":"10","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\AddPatientButton.js":"11","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\actions\\type.js":"12","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\index.js":"13","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\errorReducer.js":"14","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\GetPatientButton.js":"15","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\patientsReducer.js":"16","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\GetPatient.js":"17","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\DeletePatientButton.js":"18","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\DeletePatient.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1095,"mtime":1608719413523,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":417,"mtime":1608783655954,"results":"24","hashOfConfig":"21"},{"size":747,"mtime":1608700100231,"results":"25","hashOfConfig":"21"},{"size":589,"mtime":1608470340096,"results":"26","hashOfConfig":"21"},{"size":7812,"mtime":1608784081480,"results":"27","hashOfConfig":"21"},{"size":1068,"mtime":1608564137642,"results":"28","hashOfConfig":"21"},{"size":2461,"mtime":1608783611162,"results":"29","hashOfConfig":"21"},{"size":5501,"mtime":1608788065515,"results":"30","hashOfConfig":"21"},{"size":334,"mtime":1608699925700,"results":"31","hashOfConfig":"21"},{"size":176,"mtime":1608783782017,"results":"32","hashOfConfig":"21"},{"size":226,"mtime":1608704689755,"results":"33","hashOfConfig":"21"},{"size":505,"mtime":1608784291853,"results":"34","hashOfConfig":"21"},{"size":337,"mtime":1608783521065,"results":"35","hashOfConfig":"21"},{"size":403,"mtime":1608700193386,"results":"36","hashOfConfig":"21"},{"size":2251,"mtime":1608704721901,"results":"37","hashOfConfig":"21"},{"size":341,"mtime":1608700028356,"results":"38","hashOfConfig":"21"},{"size":3343,"mtime":1608783558667,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"7ewgeg",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\index.js",[],["86","87"],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\App.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reportWebVitals.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Layout\\Footer.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Dashboard.js",["88"],"import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PatientItemComponent from './PatientItemComponent';\r\n\r\n\r\nclass DashboardComponent extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"patients\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        \r\n                        <hr />\r\n                        <PatientItemComponent/>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DashboardComponent;","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\store.js",["89"],"import {createStore, applyMiddleware,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState={};\r\nconst middleWare=[thunk];\r\n\r\nlet store;\r\nif (window.navigator.userAgent.includes(\"Chrome\")) {\r\n    store =  createStore(\r\n        rootReducer,\r\n        compose(applyMiddleware(...middleWare),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && \r\n        window.__REDUX_DEVTOOLS_EXTENSION__()));\r\n} else {\r\n    store =  createStore(\r\n        rootReducer,\r\n        compose(applyMiddleware(...middleWare)));\r\n}\r\n\r\nexport default store; ","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\AddPatient.js",["90"],"import React, { Component, UseState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { createPatient } from '../../actions/PatientAction';\r\nclass AddPatient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            patientName: \"\",\r\n            patientIdentifier: \"\",\r\n            patientAge: \"\",\r\n            phoneNumber: \"\",\r\n            patientAddress: \"\",\r\n            errors: {}\r\n        }\r\n        //this.onChange=this.onChange.bind(this);\r\n    }\r\n\r\n    // life cycle hook\r\n    componentWillReceiveProps(nextProps) {\r\n        //console.log(\"--------componentWillReceiveProps : Called----------\");\r\n        //console.log(nextProps)\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors.error});\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState(\r\n            { [event.target.name]: event.target.value }\r\n        );\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newPatient = {\r\n            patientName: this.state.patientName,\r\n            patientIdentifier: this.state.patientIdentifier,\r\n            patientAge: this.state.patientAge,\r\n            phoneNumber: this.state.phoneNumber,\r\n            patientAddress: this.state.patientAddress\r\n        }\r\n        this.props.createPatient(newPatient, this.props.history);\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        \r\n        return (\r\n            <div className=\"patient\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h5 className=\"display-4 text-center\">Create Patient form</h5>\r\n                            <hr />\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={classnames(\"form-control form-control-lg\",{\"is-invalid\":errors.patientName})}\r\n                                        placeholder=\"Patient Name\"\r\n                                        name=\"patientName\"\r\n                                        onChange={this.onChange}\r\n                                        value={this.state.patientName}\r\n                                    />\r\n                                    {errors.patientName && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.patientName}\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={classnames(\"form-control form-control-lg\", { \"is-invalid\": errors.patientIdentifier },{ \"is-invalid\": errors.responseMessage })}\r\n                                        placeholder=\"Unique Patient ID\"\r\n                                        name=\"patientIdentifier\"\r\n                                        onChange={this.onChange}\r\n                                        value={this.state.patientIdentifier}\r\n                                    />\r\n                                    {errors.patientIdentifier && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.patientIdentifier}\r\n                                        </div>\r\n                                    )}\r\n                                    {errors.responseMessage && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.responseMessage}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        className={classnames(\"form-control form-control-lg\", { \"is-invalid\": errors.patientAge })}\r\n                                        placeholder=\"Patient Age\"\r\n                                        name=\"patientAge\"\r\n                                        onChange={this.onChange}\r\n                                        value={this.state.patientAge}\r\n                                        min=\"1\"\r\n                                        max=\"100\"\r\n                                    />\r\n                                    {errors.patientAge && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.patientAge}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"tel\"\r\n                                        pattern=\"[6-9][0-9]{9}\"\r\n                                        className={classnames(\"form-control form-control-lg\", { \"is-invalid\": errors.phoneNumber })}\r\n                                        name=\"phoneNumber\"\r\n                                        placeholder=\"Phone Number\"\r\n                                        onChange={this.onChange}\r\n                                        value={this.state.phoneNumber}\r\n                                    />\r\n                                    {errors.phoneNumber && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.phoneNumber}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea\r\n                                        type=\"text\"\r\n                                        placeholder=\"Patient Address\"\r\n                                        className={classnames(\"form-control form-control-lg\", { \"is-invalid\": errors.patientAddress })}\r\n                                        onChange={this.onChange}\r\n                                        name=\"patientAddress\" value={this.state.patientAddress}\r\n                                    ></textarea>\r\n                                    {errors.patientAddress && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.patientAddress}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddPatient.propTypes = {\r\n    createPatient: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\n//Here from state we refer to combine reducer in which we have error as an reducer or state that's why state.error\r\nconst mapStateToProps = state => {\r\n    return { errors: state.error }\r\n};\r\n\r\nexport default connect(mapStateToProps, { createPatient })(AddPatient);","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\Layout\\Header.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\PatientItemComponent.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\actions\\PatientAction.js",["91","92","93"],"import axios from 'axios';\r\nimport { GET_ERRORS,GET_PATIENTS,DELETE_PATIENT,GET_PATIENT} from './type';\r\n\r\nexport const createPatient=(patient,history)=>async dispatch=> {\r\n    try {\r\n        const res =await axios.post (\"http://localhost:8080/api/patients\",patient)\r\n        //alert(\"Patient saved with following details:\\nPatient Identifier:  \" + res[\"data\"][\"patientIdentifier\"]+\"\\nName: \" + res[\"data\"][\"patientName\"] + \"\\nAge: \" + res[\"data\"][\"patientAge\"] + \"\\nPhone Number: \" + res[\"data\"][\"phoneNumber\"] + \"\\nAddress: \" + res[\"data\"][\"patientAddress\"]);\r\n        history.push(\"/getPatient\");\r\n    } catch (error) {\r\n        console.log(patient);\r\n        console.log(error.response);\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:error.response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPatients=()=>async dispatch=>{\r\n    await axios.get(\"http://localhost:8080/api/patients/all\")\r\n    \r\n    .then(response => {\r\n        if (response.status==200) {\r\n            dispatch({\r\n                type: GET_PATIENTS,\r\n                payload: response.data\r\n            })\r\n        }\r\n        else {\r\n            var error = new Error('Error' + response.status + ' ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n     },\r\n        error => {\r\n            var errmsg = new Error(error.message);\r\n            throw errmsg;\r\n        })\r\n    .catch(error=>dispatch(getPatientsError(error.message)));\r\n}\r\nexport const getPatientsError = (errmesg) => ({\r\n        type:GET_ERRORS,\r\n        payload: errmesg\r\n     })\r\n\r\n     export const getPatient=(patientidentifier,history)=>async dispatch=>{\r\n        const res=await axios.get(`http://localhost:8080/api/patients/${patientidentifier}`);\r\n        dispatch({\r\n            type:GET_PATIENT,\r\n            payload:res.data\r\n        })\r\n    }\r\n    \r\n    \r\n    export const deletePatient=(patientIdentifier,history)=>async dispatch=>{\r\n        try{\r\n            \r\n            const res = await axios.delete(`http://localhost:8080/api/patients/${patientIdentifier}`);\r\n            window.confirm(\"Are you sure ? This will delete the patient and the data related to it\")\r\n            alert(\"Patient successfully deleted !!\");\r\n            history.push(\"/getPatient\");\r\n            dispatch({\r\n                type:DELETE_PATIENT,\r\n                payload:patientIdentifier\r\n            })\r\n         }\r\n         catch (error) {\r\n            \r\n            console.log(error.response);\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:error.response.data\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import axios from 'axios';\r\n// import { GET_ERRORS, GET_PATIENTS, DELETE_PATIENTS } from './type';\r\n// export const createPatient = (patient, history) => async dispatch => {\r\n//     const res = await axios.post(\"http://localhost:8080/api/patients\", patient)\r\n//     fetch(res).then((response) => {\r\n//         if (response.ok) {\r\n//             console.log(res);\r\n//             alert(\"Patient saved with following details:\\nPatient Identifier:  \" + res[\"data\"][\"patientIdentifier\"] + \"\\nName: \" + res[\"data\"][\"patientName\"] + \"\\nAge: \" + res[\"data\"][\"patientAge\"] + \"\\nPhone Number: \" + res[\"data\"][\"phoneNumber\"] + \"\\nAddress: \" + res[\"data\"][\"patientAddress\"]);\r\n//             history.push(\"/getPatient\");\r\n//         }\r\n//     }).catch((error) => {\r\n//         dispatch({\r\n//             type: GET_ERRORS,\r\n//             payload: error.response.data\r\n//         })\r\n//     });\r\n// }\r\n\r\n\r\n// export const getPatients = () => async dispatch => {\r\n\r\n    \r\n//     const res = await axios.get(\"http://localhost:8080/api/patients/all\");\r\n//     // const timeout = setTimeout(dispatch(getPatients(getPatients), 2000));\r\n//     fetch(res).then(response => {\r\n//         if (response.ok) {\r\n//             return response;\r\n//         }\r\n//         else {\r\n//             var error = new Error('Error' + response.status + ' ' + response.statusText);\r\n//             error.response = response;\r\n//             throw error;\r\n//         }\r\n//     },\r\n//         error => {\r\n//             var errmsg = new Error(error.message);\r\n//             throw errmsg;\r\n//         })\r\n//     dispatch({\r\n//         type: GET_PATIENTS,\r\n//         payload: res.data\r\n//     })\r\n//     // .catch(error=>dispatch(getPatientsError(error.message)));\r\n// }\r\n// \r\n\r\n// export const deletePatient = (patientIdentifier) => async (dispatch) => {\r\n//     if (window.confirm(\"Are you sure ? This will delete the Doctor details\")) {\r\n//         const res = await axios.delete(`http://localhost:8080/api/doctors/delete/${patientIdentifier}`);\r\n//         console.log(res);\r\n//         dispatch({\r\n//             type: DELETE_PATIENTS,\r\n//             payload: patientIdentifier\r\n//         });\r\n//     }\r\n// };\r\n\r\n\r\n// //     try {\r\n// //         const res =await axios.post (\"http://localhost:8080/api/patients\",patient)\r\n// //         alert(\"Patient saved with following details:\\nPatient Identifier:  \" + res[\"data\"][\"patientIdentifier\"]+\"\\nName: \" + res[\"data\"][\"patientName\"] + \"\\nAge: \" + res[\"data\"][\"patientAge\"] + \"\\nPhone Number: \" + res[\"data\"][\"phoneNumber\"] + \"\\nAddress: \" + res[\"data\"][\"patientAddress\"]);\r\n// //         history.push(\"/getPatient\");\r\n// //     } \r\n// //     catch (error) {\r\n// //         dispatch({\r\n// //             type:GET_ERRORS,\r\n// //             payload:error.response.data\r\n// //         })\r\n// //     }\r\n// // }\r\n// // ","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\AddPatientButton.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\actions\\type.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\index.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\errorReducer.js",["94"],"import { GET_ERRORS } from './../actions/type';\r\n\r\nconst initialState={\r\n    errorMessage:null\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            //alert(action.payload[\"patientName\"]+ \"\\n\" + action.payload[\"patientIdentifier\"] + \"\\n\" +action.payload[\"patientAddress\"]);\r\n            return{\r\n                ...state,\r\n                errorMessage:action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\GetPatientButton.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\reducers\\patientsReducer.js",["95"],"import { GET_PATIENTS } from \"../actions/type\";\r\n\r\nconst initialState={\r\n    patients:[],\r\n    patient:{}\r\n};\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case GET_PATIENTS:\r\n            return{\r\n                ...state,\r\n                patients:action.payload\r\n            }\r\n            default:\r\n                return state;\r\n                \r\n    }\r\n}","C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\GetPatient.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\DeletePatientButton.js",[],"C:\\Users\\hp\\Documents\\React Health Assist\\health-assist-ui\\src\\components\\patients\\DeletePatient.js",["96"],"import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { deletePatient } from '../../actions/PatientAction';\r\nimport classnames from \"classnames\";\r\nclass DeletePatient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state={\r\n            patients:[],\r\n            errors : {},\r\n            modalIsOpen: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps)\r\n    {\r\n        if(nextProps.errors)\r\n        {\r\n            this.setState({errors : nextProps.errors.error});\r\n        }\r\n    }\r\n\r\n    onChange=(event)=>{\r\n       this.setState(\r\n           {[event.target.name]:event.target.value}\r\n       );\r\n    }\r\n\r\n    onSubmit=(event)=>{\r\n        event.preventDefault();\r\n        const deletePatient = {\r\n            patientIdentifier:this.state.patientIdentifier\r\n            \r\n        }\r\n        console.log(this.state.patientIdentifier);\r\n        this.props.deletePatient(this.state.patientIdentifier,this.props.history);\r\n        \r\n\r\n    }\r\n\r\n    \r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div className=\"patient\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <h5 className=\"display-4 text-center\">Delete Patient detail</h5>\r\n                        <hr />\r\n                        <form onSubmit={this.onSubmit}>\r\n                            \r\n                            <div className=\"form-group\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className={classnames(\"form-control form-control-lg\",{\"is-invalid\":errors.patientIdentifier},{ \"is-invalid\": errors.responseMessage })}\r\n                                    placeholder=\"Unique Patient ID\" \r\n                                    name=\"patientIdentifier\" \r\n                                    onChange={this.onChange}\r\n                                    value={this.state.patientIdentifier}\r\n                                    />\r\n\r\n                                    {errors.patientIdentifier && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.patientIdentifier}\r\n                                            </div>\r\n                                    )}\r\n                                    {errors.responseMessage && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {errors.responseMessage}\r\n                                            </div>\r\n                                    )}\r\n                            </div>\r\n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n\r\n                        </form>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nDeletePatient.propTypes = {\r\n    deletePatient:PropTypes.func.isRequired,\r\n    errors:PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { errors: state.error }\r\n};\r\nexport default connect(mapStateToProps,{deletePatient})(DeletePatient);",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":7,"column":5,"nodeType":"103","messageId":"104","endLine":9,"endColumn":6},{"ruleId":"105","severity":1,"message":"106","line":5,"column":7,"nodeType":"107","messageId":"108","endLine":5,"endColumn":19},{"ruleId":"105","severity":1,"message":"109","line":1,"column":28,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"110","line":6,"column":15,"nodeType":"107","messageId":"108","endLine":6,"endColumn":18},{"ruleId":"111","severity":1,"message":"112","line":23,"column":28,"nodeType":"113","messageId":"114","endLine":23,"endColumn":30},{"ruleId":"105","severity":1,"message":"110","line":58,"column":19,"nodeType":"107","messageId":"108","endLine":58,"endColumn":22},{"ruleId":"115","severity":1,"message":"116","line":7,"column":1,"nodeType":"117","endLine":18,"endColumn":2},{"ruleId":"115","severity":1,"message":"116","line":8,"column":1,"nodeType":"117","endLine":19,"endColumn":2},{"ruleId":"105","severity":1,"message":"118","line":34,"column":15,"nodeType":"107","messageId":"108","endLine":34,"endColumn":28},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'initialState' is assigned a value but never used.","Identifier","unusedVar","'UseState' is defined but never used.","'res' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'deletePatient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]